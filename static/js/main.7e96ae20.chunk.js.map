{"version":3,"sources":["reducers/tasksReducer.js","contexts/TaskContext.js","contexts/ModeContext.js","components/Menu.js","components/TaskInfo.js","components/Tasks.js","components/Form.js","components/SlideButton.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["tasksReducer","state","action","type","name","task","details","date","id","uuid","filter","TaskContext","createContext","TaskContextProvider","props","useReducer","currentStorage","localStorage","getItem","JSON","parse","tasks","dispatch","useEffect","setItem","stringify","Provider","value","children","ModeContext","ModeContextProvider","darkMode","dark","body","menu","taskDetails","li","color","light","toggleState","setState","this","Component","Menu","useContext","mode","className","style","background","length","TaskInfo","onClick","Tasks","map","key","Form","useState","setName","setDate","setDetails","onSubmit","e","preventDefault","placeholder","onChange","target","required","Button","Body","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e96ae20.chunk.js","sourcesContent":["import uuid from \"uuid/v1\";\r\n\r\nexport const tasksReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TASK\":\r\n      return [\r\n        ...state,\r\n        {\r\n          name: action.task.name,\r\n          details: action.task.details,\r\n          date: action.task.date,\r\n          id: uuid()\r\n        }\r\n      ];\r\n    case \"REMOVE_TASK\":\r\n      return state.filter(task => task.id !== action.id);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer, useEffect } from \"react\";\r\nimport { tasksReducer } from \"../reducers/tasksReducer\";\r\n\r\nexport const TaskContext = createContext();\r\n\r\nconst TaskContextProvider = props => {\r\n  const [tasks, dispatch] = useReducer(tasksReducer, [], () => {\r\n    const currentStorage = localStorage.getItem(\"tasks\");\r\n    return currentStorage ? JSON.parse(currentStorage) : [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  return (\r\n    <TaskContext.Provider value={{ tasks, dispatch }}>\r\n      {props.children}\r\n    </TaskContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TaskContextProvider;\r\n","import React, { createContext, Component } from \"react\";\r\n\r\nexport const ModeContext = createContext();\r\n\r\nclass ModeContextProvider extends Component {\r\n  state = {\r\n    darkMode: false,\r\n    dark: {\r\n      body: \"#06131f\",\r\n      menu: \"#4f89db\",\r\n      taskDetails: \"#4779bf\",\r\n      li: \"#1b4785\",\r\n      color: \"lightgray\",\r\n    },\r\n    light: {\r\n      body: \"#a9a9a9\",\r\n      menu: \"#fff4f1\",\r\n      taskDetails: \"#fff4f1\",\r\n      li: \"#ed6560\",\r\n      color: \"black\",\r\n    },\r\n  };\r\n\r\n  toggleState = () => {\r\n    this.setState({ darkMode: !this.state.darkMode });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ModeContext.Provider\r\n        value={{ ...this.state, toggleState: this.toggleState }}\r\n      >\r\n        {this.props.children}\r\n      </ModeContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModeContextProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { TaskContext } from \"../contexts/TaskContext\";\r\nimport { ModeContext } from \"../contexts/ModeContext\";\r\nimport \"../components/Menu.scss\";\r\n\r\nconst Menu = () => {\r\n  const { tasks } = useContext(TaskContext);\r\n  const { darkMode, dark, light } = useContext(ModeContext);\r\n  const mode = darkMode ? dark : light;\r\n\r\n  return (\r\n    <div className=\"menu\" style={{ background: mode.menu, color: mode.color }}>\r\n      <h1>Task List</h1>\r\n      <p>\r\n        {tasks.length\r\n          ? `You have ${tasks.length} task(s)`\r\n          : `Your task list is empty. Please add a new task.`}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { useContext } from \"react\";\r\nimport { TaskContext } from \"../contexts/TaskContext\";\r\nimport { ModeContext } from \"../contexts/ModeContext\";\r\nimport \"../components/TaskInfo.scss\";\r\n\r\nconst TaskInfo = ({ task }) => {\r\n  const { dispatch } = useContext(TaskContext);\r\n  const { darkMode, dark, light } = useContext(ModeContext);\r\n  const mode = darkMode ? dark : light;\r\n\r\n  return (\r\n    <li style={{ background: mode.li, color: mode.color }}>\r\n      <div className=\"task-main\">\r\n        <div className=\"name\">{task.name}</div>\r\n        <div className=\"date\">{task.date}</div>\r\n        <span onClick={() => dispatch({ type: \"REMOVE_TASK\", id: task.id })}>\r\n          X\r\n        </span>\r\n      </div>\r\n      <div\r\n        className=\"task-details\"\r\n        style={{ background: mode.taskDetails, color: mode.color }}\r\n      >\r\n        <div className=\"details\">{task.details}</div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TaskInfo;\r\n","import React, { useContext } from \"react\";\r\nimport { TaskContext } from \"../contexts/TaskContext\";\r\nimport TaskInfo from \"./TaskInfo\";\r\nimport \"../components/Tasks.scss\";\r\n\r\nconst Tasks = () => {\r\n  const { tasks } = useContext(TaskContext);\r\n  return (\r\n    <div className=\"task-list\">\r\n      <ul>\r\n        {tasks.map((task) => {\r\n          return <TaskInfo task={task} key={task.id} />;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { TaskContext } from \"../contexts/TaskContext\";\r\nimport { ModeContext } from \"../contexts/ModeContext\";\r\nimport \"../components/Form.scss\";\r\n\r\nconst Form = () => {\r\n  const { darkMode, dark, light } = useContext(ModeContext);\r\n  const mode = darkMode ? dark : light;\r\n\r\n  const { dispatch } = useContext(TaskContext);\r\n  const [name, setName] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [details, setDetails] = useState(\"\");\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: \"ADD_TASK\",\r\n      task: {\r\n        name,\r\n        date,\r\n        details,\r\n      },\r\n    });\r\n    setName(\"\");\r\n    setDate(\"\");\r\n    setDetails(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <input\r\n        type=\"text\"\r\n        style={{ background: mode.li, color: mode.color }}\r\n        placeholder=\"Please Enter Task\"\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)}\r\n        required\r\n      />\r\n      <input\r\n        type=\"date\"\r\n        style={{ background: mode.li, color: mode.color }}\r\n        placeholder=\"Please Enter Date\"\r\n        value={date}\r\n        onChange={(e) => setDate(e.target.value)}\r\n        required\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        style={{ background: mode.li, color: mode.color }}\r\n        placeholder=\"Please Enter Details (optional)\"\r\n        className=\"input-details\"\r\n        value={details}\r\n        onChange={(e) => setDetails(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"submit\"\r\n        style={{ background: mode.taskDetails, color: mode.color }}\r\n        value=\"Add\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useContext } from \"react\";\r\nimport { ModeContext } from \"../contexts/ModeContext\";\r\nimport \"../components/SlideButton.scss\";\r\n\r\nconst Button = () => {\r\n  const { darkMode, dark, light, toggleState } = useContext(ModeContext);\r\n  const mode = darkMode ? dark : light;\r\n\r\n  return (\r\n    <div className=\"checkbox\">\r\n      <p className=\"theme-text\" style={{ color: mode.color }}>\r\n        Change Theme:\r\n      </p>\r\n      <label className=\"switch\">\r\n        <input type=\"checkbox\" onChange={toggleState} />\r\n        <span className=\"slider\"></span>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useContext } from \"react\";\r\nimport { ModeContext } from \"../contexts/ModeContext\";\r\nimport Menu from \"./Menu\";\r\nimport Tasks from \"./Tasks\";\r\nimport Form from \"./Form\";\r\nimport SlideButton from \"./SlideButton\";\r\nimport \"../components/Body.scss\";\r\n\r\nconst Body = () => {\r\n  const { darkMode, dark, light } = useContext(ModeContext);\r\n  const mode = darkMode ? dark : light;\r\n\r\n  return (\r\n    <div\r\n      className=\"app-body\"\r\n      style={{ background: mode.body }}\r\n    >\r\n      <SlideButton />\r\n      <div className=\"app-content\">\r\n        <Menu />\r\n        <Tasks />\r\n        <Form />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","import React from \"react\";\r\nimport TaskContextProvider from \"./contexts/TaskContext\";\r\nimport ModeContextProvider from \"./contexts/ModeContext\";\r\nimport Body from \"./components/Body\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <ModeContextProvider>\r\n        <TaskContextProvider>\r\n          <Body />\r\n        </TaskContextProvider>\r\n      </ModeContextProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}